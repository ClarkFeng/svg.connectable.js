(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.connectable=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){var Id=require("idy"),SetOrGet=require("set-or-get");var _cache={},container=null,markers=null;function connectable(options,elmTarget){var con={};if(elmTarget===undefined){elmTarget=options;options={}}container=options.container||container;var elmSource=this;markers=options.markers||markers;var marker=markers.marker(10,10),markerId="triangle-"+Id(),line=container.path().attr("marker-end","url(#"+markerId+")");marker.attr({id:markerId,viewBox:"0 0 10 10",refX:"0",refY:"5",markerUnits:"strokeWidth",markerWidth:"4",markerHeight:"5"});marker.path().attr({d:"M 0 0 L 10 5 L 0 10 z"});var sPos={},tPos={};con.source=elmSource;con.target=elmTarget;con.line=line;con.marker=marker;con.id=con.source.node.id+con.target.node.id;SetOrGet(_cache,con.id,[]).push(con);con.computeLineCoordinates=function(con){var sT=con.source.transform(),tT=con.target.transform(),sB=con.source.bbox(),tB=con.target.bbox(),x1=sT.x+sB.width/2,y1=sT.y+sB.height/2,x2=tT.x+tB.width/2,y2=tT.y+tB.height/2;return{x1:x1,y1:y1,x2:x2,y2:y2}};if(options.padEllipse){con.computeLineCoordinates=function(con){var sPos=con.source.transform(),tPos=con.target.transform(),elmS=con.source.node.querySelector("ellipse")||con.source.node.querySelector("circle"),elmT=con.target.node.querySelector("ellipse")||con.target.node.querySelector("circle"),xR1,xR2,yR1,yR2;if(elmS.tagName==="circle"){xR1=yR1=parseFloat(elmS.getAttribute("r"));xR2=yR2=parseFloat(elmT.getAttribute("r"))}else{xR1=parseFloat(elmS.getAttribute("rx"));yR1=parseFloat(elmS.getAttribute("ry"));xR2=parseFloat(elmT.getAttribute("rx"));yR2=parseFloat(elmT.getAttribute("ry"))}var sx=sPos.x+xR1/2,sy=sPos.y+yR1/2,tx=tPos.x+xR2/2,ty=tPos.y+yR2/2,dx=tx-sx,dy=ty-sy,d=Math.sqrt(dx*dx+dy*dy),ux=dx/d,uy=dy/d,x1=sx+xR1*ux,y1=sy+yR1*uy,x2=sx+(d-xR2-5)*ux,y2=sy+(d-yR2-5)*uy;return{x1:x1+xR1/2,y1:y1+yR1/2,x2:x2+xR2/2,y2:y2+yR2/2}}}elmSource.cons=elmSource.cons||[];elmSource.cons.push(con);con.update=function(){con.computeLineCoordinates(con);line.plot()};con.update();elmSource.on("dragmove",con.update);elmTarget.on("dragmove",con.update);con.setLineColor=function(color,c){c=c||this;c.line.stroke(color);c.marker.fill(color)};return con}if(typeof SVG==="function"){SVG.extend(SVG.Element,{connectable:connectable})}else if(typeof window==="object"){throw new Error("SVG.js is not loaded but it is required.")}module.exports=connectable},{idy:2,"set-or-get":3}],2:[function(require,module,exports){function Idy(length){length=length||10;return Math.random().toString(35).substr(2,length)}module.exports=Idy},{}],3:[function(require,module,exports){var Deffy=require("deffy");function SetOrGet(input,field,def){return input[field]=Deffy(input[field],def)}module.exports=SetOrGet},{deffy:4}],4:[function(require,module,exports){var Typpy=require("typpy");function Deffy(input,def,options){if(typeof def==="function"){return def(input)}options=Typpy(options)==="boolean"?{empty:options}:{empty:false};if(options.empty){return input||def}if(Typpy(input)===Typpy(def)){return input}return def}module.exports=Deffy},{typpy:5}],5:[function(require,module,exports){function Typpy(input,target){if(arguments.length===2){return Typpy.is(input,target)}return Typpy.get(input,true)}Typpy.is=function(input,target){return Typpy.get(input,typeof target==="string")===target};Typpy.get=function(input,str){if(typeof input==="string"){return str?"string":String}if(null===input){return str?"null":null}if(undefined===input){return str?"undefined":undefined}if(input!==input){return str?"nan":NaN}return str?input.constructor.name.toLowerCase():input.constructor};module.exports=Typpy},{}]},{},[1])(1)});